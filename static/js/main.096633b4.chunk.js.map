{"version":3,"sources":["actions/index.js","reducers/index.js","sagas/index.js","components/Chart.js","components/Controls/index.js","containers/App.js","serviceWorker.js","index.js"],"names":["ActionTypes","FETCHED_SIGNALS","REQUESTED_SIGNALS","REQUESTED_SIGNALS_SUCCEEDED","REQUESTED_SIGNALS_FAILED","UPDATE_FILTERS","fetchSignals","type","requestSignals","requestSignalsSuccess","data","requestSignalsError","error","updateFilters","filteredIds","initialState","signals","undefined","isLoading","reducer","state","arguments","length","action","Object","objectSpread","rootSaga","regenerator_default","a","wrap","_context","prev","next","put","jsonData","status","t0","message","stop","_marked","_context2","takeLatest","_marked2","Chart","scaleColor","d3","scaleHeight","scaleWidth","padding","handleMouseMove","e","elem","_this","viz","getBoundingClientRect","mouseX","clientX","left","selectAll","attr","this","updateChart","_this$props","props","height","animDuration","console","log","window","addEventListener","removeEventListener","_this2","updateScales","_this$props2","components","width","filteredComponents","filter","component","includes","subsystem_id","line","exit","remove","enter","append","d","i","style","concat","call","on","dragStarted","dragged","dragEnded","text","title","_this$props3","domain","map","range","classed","y","_this3","_this$props4","react_default","createElement","ref","className","React","Component","defaultProps","Controls","handleFetchRates","id","indexOf","dispatch","filId","toConsumableArray","key","onClick","PureComponent","connect","App","src_components_Controls","components_Chart","Boolean","location","hostname","match","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","saga","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.096633b4.chunk.js","sourcesContent":["// @flow\n\nexport type Action =\n    | { type: 'FETCHED_SIGNALS' }\n    | { type: 'REQUESTED_SIGNALS' }\n    | { type: 'REQUESTED_SIGNALS_SUCCEEDED', data: Object }\n    | { type: 'REQUESTED_SIGNALS_FAILED', error: string }\n    | { type: 'UPDATE_FILTERS', filteredIds: Array<number> }\n\nexport const ActionTypes = {\n    FETCHED_SIGNALS: 'FETCHED_SIGNALS',\n    REQUESTED_SIGNALS: 'REQUESTED_SIGNALS',\n    REQUESTED_SIGNALS_SUCCEEDED: 'REQUESTED_SIGNALS_SUCCEEDED',\n    REQUESTED_SIGNALS_FAILED: 'REQUESTED_SIGNALS_FAILED',\n    UPDATE_FILTERS: 'UPDATE_FILTERS',\n};\n\nexport const fetchSignals = (): Action  => {\n    return { type: ActionTypes.FETCHED_SIGNALS };\n};\n\nexport const requestSignals = (): Action  => {\n    return { type: ActionTypes.REQUESTED_SIGNALS };\n};\n\nexport const requestSignalsSuccess = (data: Object): Action  => {\n    return { type: ActionTypes.REQUESTED_SIGNALS_SUCCEEDED, data };\n};\n\nexport const requestSignalsError = (error: string): Action => {\n    return { type: ActionTypes.REQUESTED_SIGNALS_FAILED, error };\n};\n\nexport const updateFilters = (filteredIds: Array<number>): Action => {\n    return { type: ActionTypes.UPDATE_FILTERS, filteredIds };\n};\n","// @flow\nimport { type Action, ActionTypes } from '../actions';\n\ntype State = {\n    filteredIds: Array<number>,\n    signals: Object,\n    isLoading: boolean,\n    error: string,\n};\n\nconst initialState: State = {\n    filteredIds: [],\n    signals: undefined,\n    isLoading: true,\n    error: '',\n};\n\nconst reducer = (state: State = initialState, action: Action) => {\n    switch (action.type) {\n    case ActionTypes.REQUESTED_SIGNALS:\n        return {\n            ...state,\n            isLoading: true,\n            error: null,\n        };\n    case ActionTypes.REQUESTED_SIGNALS_SUCCEEDED:\n        return {\n            ...state,\n            signals: action.data,\n            isLoading: false,\n        };\n    case ActionTypes.REQUESTED_SIGNALS_FAILED:\n        return {\n            ...state,\n            isLoading: false,\n            error: action.error,\n        };\n    case ActionTypes.UPDATE_FILTERS:\n        return {\n            ...state,\n            filteredIds: action.filteredIds,\n        };\n    default:\n        return state;\n    }\n};\n\nexport default reducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport {\n    ActionTypes,\n    requestSignals,\n    requestSignalsSuccess,\n    requestSignalsError,\n} from '../actions';\nimport jsonData from './02-response';\n\nfunction* fetchSignals() {\n    try {\n        yield put(requestSignals());\n        /*    const data = yield call(() => {\n      return fetch(URL)\n        .then(res => res.json());\n    });*/\n        if (jsonData.status === 'ok') {\n            yield put(requestSignalsSuccess(jsonData.data));\n        }\n    } catch (error) {\n        yield put(requestSignalsError(error.message));\n    }\n}\n\nfunction* rootSaga() {\n    yield takeLatest(ActionTypes.FETCHED_SIGNALS, fetchSignals);\n}\n\nexport default rootSaga;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass Chart extends React.Component {\n\n    scaleColor = d3.scaleSequential(d3.interpolateViridis);\n    scaleHeight = d3.scaleLinear();\n    scaleWidth = d3.scaleBand().padding(0.1);\n\n    componentDidMount() {\n        this.updateChart();\n        const { data, height, animDuration } = this.props;\n        // const now = new Date((begin_ts*1000));\n        // const end = new Date((end_ts*1000));\n        console.log(data);\n        window.addEventListener('mousemove', this.handleMouseMove);\n    }\n\n    componentDidUpdate() {\n        this.updateChart();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('mousemove', this.handleMouseMove);\n    }\n\n    handleMouseMove = e => {\n        const elem = this.viz.getBoundingClientRect();\n        const mouseX = e.clientX - elem.left;\n        d3.select(this.viz)\n            .selectAll('.cursor-line')\n            .attr('x', mouseX);\n    };\n\n    updateChart() {\n        console.log('updateChart');\n        this.updateScales();\n        const { animDuration, data: { components }, filteredIds, height, width } = this.props;\n        const filteredComponents = components\n            .filter(component => !filteredIds.includes(component.subsystem_id));\n        console.log('filteredComponents', filteredComponents);\n\n        /*        d3.select(this.viz)\n            .selectAll('.line')\n            .data(filteredComponents);*/\n\n        const line = d3.select(this.viz)\n            .selectAll('.line')\n            .data(filteredComponents);\n\n        line\n            .exit().remove(); //remove unneeded lines\n\n        line\n            .enter()\n            .append('rect')\n            // .transition().duration(animDuration)\n            .attr('y', (d, i) => ( this.scaleHeight(i) ))\n            .attr('height', 3 )\n            .attr('x', 250 )\n            .attr('width', width - 290 )\n            .style('fill',  '#35b485')\n            .attr('class', 'line');\n\n\n\n\n        const groupEnter = d3.select(this.viz)\n            .selectAll('.group')\n            .data(filteredComponents)\n            .enter()\n            .append('g')\n            .attr('class', 'group')\n            .attr('transform', (d, i) =>`translate(40, ${this.scaleHeight(i)})`)\n            .call(d3.drag()\n                .on('start', this.dragStarted)\n                .on('drag', this.dragged)\n                .on('end', this.dragEnded)\n            );\n\n\n        // d3.select(this.viz)\n        //     .selectAll('.label')\n        //       .data(components)\n        //       .enter()\n        // .append(\"g\")\n        //   .transition().duration(animDuration)\n        //   .attr('class', 'label-group')\n        groupEnter\n            .append('text')\n            .text(d => d.title)\n            .attr('class', 'label');\n            // .attr('x', (d) => ( this.scaleWidth(d.title) ) )\n            // .attr('y', (d, i) => ( this.scaleHeight(i) ));\n\n        // .append(\"text\")\n        //   .text(d => d.title)\n        //   .attr('class', 'label')\n        // .attr('height', (d) => (height - this.scaleHeight(d.count)) )\n\n\n        // .attr('width', this.scaleWidth.bandwidth() )\n        // .style('fill',  (d) => ( this.scaleColor(d.item) ))\n\n\n        // const bbox = d3.select(this.viz).selectAll('.label').node().getBBox();\n        // console.log('bbox', bbox);\n        // const padding = 2;\n        // d3.select(this.viz).insert(\"rect\", \"text\")\n        //     .attr(\"x\", bbox.x - padding)\n        //     .attr(\"y\", bbox.y - padding)\n        //     .attr(\"width\", bbox.width + (padding*2))\n        //     .attr(\"height\", bbox.height + (padding*2))\n        //     .style(\"fill\", \"red\")\n        //     .call(d3.drag()\n        //         .on(\"start\", this.dragStarted)\n        //         .on(\"drag\", this.dragged)\n        //         .on(\"end\", this.dragEnded)\n        //     );\n\n    }\n\n    updateScales() {\n        const { data: { components }, width, height, padding } = this.props;\n        this.scaleColor.domain([0, components.length]);\n        this.scaleWidth\n            .domain(components.map((d) => (d.title)))\n            .range([padding, width - padding]);\n        this.scaleHeight\n            .domain(d3.extent(components, (d, i) => i))\n            .range([height - padding, padding]);\n    }\n\n    dragStarted() {\n        d3.select(this).classed('active', true);\n    }\n\n    dragged(d) {\n        // console.log(d3.select(this).select('.label'));\n        // console.log(d);\n        // d.fy = d3.event.y;\n        d3.select(this)\n            // .attr('y', d3.event.y );\n            .attr('transform', `translate(40, ${d3.event.y})`);\n    }\n\n    dragEnded(){\n        d3.select(this).classed('active', false);\n    }\n\n    render() {\n        const { width, height } = this.props;\n        // const bars = components.map((d,i) => (\n        //     <rect\n        //         key={d.title}\n        //         className=\"bar\"\n        //         x={0}\n        //         y={10 * i}\n        //         height={2}\n        //         width={width}\n        //     />));\n        // const labels = components.map((d,i) => (\n        //     <text\n        //         key={d.title}\n        //         className=\"label\"\n        //         x={0}\n        //         y={10 * i}\n        //         height={2}\n        //         width={width}\n        //     />));\n        return (\n            <svg ref={ viz => (this.viz = viz) }\n                // viewBox={`0 0 ${width} ${height}`}\n                width={width} height={height}\n            >\n                {/*{ bars }*/}\n                {/*{ labels }*/}\n                <rect className=\"cursor-line\" y={0} width={2} height={height} />\n            </svg>\n        );\n    }\n}\n\nChart.defaultProps = {\n    animDuration: 600\n};\n\nChart.propTypes = {\n    data: PropTypes.array.isRequired,\n    baseData: PropTypes.object.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    padding: PropTypes.number.isRequired,\n    animDuration: PropTypes.number\n};\n\nexport default Chart;\n","// @flow\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { updateFilters } from '../../actions';\nimport { type Props } from '../../containers/App';\nimport './index.scss';\n\nclass Controls extends PureComponent<Props> {\n\n    handleFetchRates = id => {\n        const { filteredIds } = this.props;\n\n        if (~filteredIds.indexOf(id)) {\n            this.props.dispatch(updateFilters(\n                filteredIds.filter(filId => filId !== id)\n            ));\n        } else {\n            this.props.dispatch(updateFilters(\n                [...filteredIds, id]\n            ));\n        }\n\n    };\n\n    render() {\n        const { components } = this.props;\n\n        return (\n            <div className=\"controls-block\">\n                {components.map(component => (\n                    <button\n                        key={component.subsystem_id}\n                        className=\"controls-block__btn\"\n                        onClick={() => this.handleFetchRates(component.subsystem_id)}\n                    >\n                        {component.title}\n                    </button>\n                ))}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    filteredIds: state.filteredIds,\n    isLoading: state.isLoading,\n    signals: state.signals,\n    error: state.error,\n});\n\nexport default connect(mapStateToProps)(Controls);\n","// @flow\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Chart from '../components/Chart';\nimport Controls from '../components/Controls';\nimport { fetchSignals } from '../actions';\nimport '../styles/App.css';\n\nconst barsData = [\n    {\n        item: 12,\n        count: 0\n    },\n    {\n        item: 31,\n        count: 1\n    },\n    {\n        item: 24,\n        count: 2\n    },\n];\n\nexport type Props = {\n    filteredIds: Array<number>,\n    signals: Object,\n    components: Array<Object>,\n    dispatch: (args: any) => void,\n    isLoading: boolean,\n    error: 'string',\n};\n\nclass App extends PureComponent<Props> {\n\n    componentDidMount() {\n        this.handleFetchRates();\n    }\n\n    handleFetchRates = () => {\n        this.props.dispatch(fetchSignals());\n    };\n\n    render() {\n        const { signals, isLoading, filteredIds } = this.props;\n\n        if (isLoading) return <div>Loading</div>;\n\n        return (\n            <div className=\"App\">\n                <Controls\n                    components={signals.components}\n                />\n                <Chart\n                    filteredIds={filteredIds}\n                    data={signals}\n                    // baseData={data}\n                    height={500}\n                    width={1280}\n                    padding={30}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    filteredIds: state.filteredIds,\n    isLoading: state.isLoading,\n    signals: state.signals,\n    error: state.error,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from './reducers';\nimport saga from './sagas';\nimport './styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    reducer,\n    composeWithDevTools(\n        applyMiddleware(sagaMiddleware),\n    )\n);\n\nsagaMiddleware.run(saga);\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}