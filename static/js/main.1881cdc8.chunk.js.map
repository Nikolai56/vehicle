{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["BarChartV3","scaleColor","d3","scaleHeight","scaleWidth","padding","handleMouseMove","e","elem","_this","viz","getBoundingClientRect","mouseX","clientX","left","selectAll","attr","this","updateChart","_this$props","props","baseData","height","animDuration","console","log","window","addEventListener","removeEventListener","_this2","updateScales","_this$props2","data","d","item","transition","duration","count","bandwidth","style","_this3","_this$props3","enter","append","text","_this$props4","width","domain","length","map","range","_this4","_this$props5","components","i","react_default","a","createElement","key","title","className","x","y","ref","React","Component","defaultProps","App","Chart","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1881cdc8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass BarChartV3 extends React.Component {\n\n    scaleColor = d3.scaleSequential(d3.interpolateViridis);\n    scaleHeight = d3.scaleLinear();\n    scaleWidth = d3.scaleBand().padding(0.1);\n\n    componentDidMount() {\n        this.updateChart();\n        const { baseData, height, animDuration } = this.props;\n        // const now = new Date((begin_ts*1000));\n        // const end = new Date((end_ts*1000));\n        console.log(baseData);\n        window.addEventListener(\"mousemove\", this.handleMouseMove);\n    }\n\n    componentDidUpdate() {\n        // this.updateChart();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.handleMouseMove);\n    }\n\n    handleMouseMove = e => {\n        const elem = this.viz.getBoundingClientRect();\n        const mouseX = e.clientX - elem.left;\n        d3.select(this.viz)\n            .selectAll('.cursor-line')\n            .attr('x', mouseX);\n    };\n\n    updateChartOld() {\n        this.updateScales();\n        const { data, height, animDuration } = this.props;\n        const bars = d3.select(this.viz)\n            .selectAll('.bar')\n            .data(data, function(d) { return d ? d.item : d3.select(this).attr('item'); });\n        bars\n            .transition().duration(animDuration)\n            .attr('y', (d) => ( this.scaleHeight(d.count) ))\n            .attr('height', (d) => (height - this.scaleHeight(d.count)) )\n            .attr('x', (d) => ( this.scaleWidth(d.item) ) )\n            .attr('width', this.scaleWidth.bandwidth() )\n            .style('fill',  (d) => ( this.scaleColor(d.item) ));\n    }\n\n    updateChart() {\n        this.updateScales();\n        const { baseData, data, height, animDuration } = this.props;\n        d3.select(this.viz)\n            .selectAll('.bar')\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .transition().duration(animDuration)\n            .attr('y', (d) => ( this.scaleHeight(d.count) ))\n            .attr('height', (d) => (height - this.scaleHeight(d.count)) )\n            .attr('x', (d) => ( this.scaleWidth(d.item) ) )\n            .attr('width', this.scaleWidth.bandwidth() )\n            .style('fill',  (d) => ( this.scaleColor(d.item) ));\n\n        d3.select(this.viz)\n            .selectAll('.label')\n            .data(baseData)\n            .enter()\n            .append(\"text\")\n            .transition().duration(animDuration)\n            .text('sdf')\n            .attr('y', (d) => ( this.scaleHeight(d.count) ))\n            // .attr('height', (d) => (height - this.scaleHeight(d.count)) )\n            .attr('x', (d) => ( this.scaleWidth(d.item) ) )\n            // .attr('width', this.scaleWidth.bandwidth() )\n            // .style('fill',  (d) => ( this.scaleColor(d.item) ))\n            ;\n\n    }\n\n    updateScales() {\n        const { data, width, height, padding } = this.props;\n        this.scaleColor.domain([0, data.length]);\n        this.scaleWidth\n            .domain(data.map((d) => (d.item)))\n            .range([padding, width - padding]);\n        this.scaleHeight\n            .domain(d3.extent(data, (d) => (d.count)))\n            .range([height - padding, padding]);\n    }\n\n    render() {\n        const { width, height, data, baseData: { components } } = this.props;\n        const bars = components.map((d,i) => (\n            <rect\n                key={d.title}\n                className=\"bar\"\n                x={0}\n                y={10 * i}\n                height={2}\n                width={width}\n            />));\n        const labels = components.map((d,i) => (\n            <text\n                key={d.title}\n                className=\"label\"\n                x={0}\n                y={10 * i}\n                height={2}\n                width={width}\n            />));\n        return (\n            <svg ref={ viz => (this.viz = viz) }\n                // viewBox={`0 0 ${width} ${height}`}\n                width={width} height={height}\n            >\n                {/*{ bars }*/}\n                {/*{ labels }*/}\n                <rect className=\"cursor-line\" y={0} width={2} height={height} />\n            </svg>\n        );\n    }\n}\n\nBarChartV3.defaultProps = {\n    animDuration: 600\n};\n\nBarChartV3.propTypes = {\n    data: PropTypes.array.isRequired,\n    baseData: PropTypes.object.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    padding: PropTypes.number.isRequired,\n    animDuration: PropTypes.number\n};\n\nexport default BarChartV3;\n","import React, { Component } from 'react';\nimport Chart from './components/Chart';\nimport './App.css';\nimport jsonData from './02-response';\n\n// const baseData = JSON.parse(`${jsonData}`);\n// console.log(JSON.parse(JSON.stringify(jsonData)));\n// console.log(jsonData);\nconst baseData = jsonData.data;\n\nconst data = [\n    {\n        item: 12,\n        count: 0\n    },\n    {\n        item: 31,\n        count: 1\n    },\n    {\n        item: 24,\n        count: 2\n    },\n];\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Chart\n                    data={data}\n                    baseData={baseData}\n                    height={500}\n                    width={1280}\n                    padding={30}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}